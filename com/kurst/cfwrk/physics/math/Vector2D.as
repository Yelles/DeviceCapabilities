/********************************************************************************************************************************************************************************* * Class Name  	: * Version 	  	: * Description 	: * ********************************************************************************************************************************************************************************* * Author 		: Karim Beyrouti* Date 			: * ********************************************************************************************************************************************************************************* * METHODS* ** PROPERTIES* ** EVENTS* * ********************************************************************************************************************************************************************************* 				:************************************************************************************************************************************************************************************ NOTES			:**********************************************************************************************************************************************************************************/package com.kurst.cfwrk.physics.math {		//------------------------------------------------------------------------------------------------------------------------------------------------------------	import flash.display.Sprite;	//------------------------------------------------------------------------------------------------------------------------------------------------------------	public class Vector2D {				//------------------------------------------------------------------------------------------------------------------------------------------------------------				public var x : Number;		public var y : Number;		//------------------------------------------------------------------------------------------------------------------------------------------------------------		public function Vector2D( px : Number = 0 , py : Number = 0 ) : void {						x = px;			y = py;					}				//------------------------------------------------------------------------------------------------------------------------------------------------------------		//-PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 *  		 * 		 * @param		 * @return		 */		final public function projection(vec:Vector2D):Number {						var proj:Number;						if( (length == 0) || ( vec.length == 0) ){								proj = 0;			  			} else {								proj = (x*vec.x + y*vec.y)/vec.length;			  			}						return proj;		}			/**		 *  		 * 		 * @param		 * @return		 */		final public function unit( result : Vector2D ):Vector2D {						var l : Number = length;						if ( length > 0 ) {								result.x = x / l;				result.y = x / l;								return result;			} else {								result.x = 0;				result.y = 0;								return result;							}		}				/**		 *  		 * 		 * @param		 * @return		 */		final public function get length() : Number {						return Math.sqrt( x * x + y * y );					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function get lengthSquared() : Number {						return x * x + y * y;					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function get angle() : Number {						return Math.atan2( y , x );					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function clone() : Vector2D {						return new Vector2D( x , y );					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function negate() : void {						x = - x;			y = - y;					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function normalize() : Number {						if ( length > 0 ) {								x /= length;				y /= length;							}						return length;					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function add( vec : Vector2D , result : Vector2D ) : Vector2D {						result.x = x + vec.x;			result.y = y + vec.y;						return result;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function incrementBy( vec : Vector2D ) : void {						x += vec.x;			y += vec.y;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function subtract( vec : Vector2D , result : Vector2D ) : Vector2D {						result.x =  x - vec.x;			result.y =  y - vec.y;						return result;						}		/**		 *  		 * 		 * @param		 * @return		 */		final public function decrementBy( vec : Vector2D ) : void {						x -= vec.x;			y -= vec.y;					}		/**		 *  		 * 		 * @param		 * @return		 */		final public function multiply( k : Number , result : Vector2D) : Vector2D {						result.x = x * k;			result.y = y * k;						return result;						}		/**		 *  		 * 		 * @param		 * @return		 */		final public function addScaled( vec : Vector2D , k : Number , result : Vector2D) : Vector2D {							result.x = x + k * vec.x;			result.y = y + k * vec.y;						return result;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function scaleBy( k : Number ) : void {						x *= k;			y *= k;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function dotProduct( vec : Vector2D ) : Number {						return x * vec.x + y * vec.y;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function para( u : Number  , result : Vector2D , positive : Boolean = true ) : Vector2D {			result.x = x;			result.y = y;						if (positive) {								result.scaleBy( u / length );						} else {							result.scaleBy( -u / length );						}						return result;				}		/**		 *  		 * 		 * @param		 * @return		 */		final public function perp( u : Number , result : Vector2D , anticlockwise : Boolean = true ) : Vector2D {			result.x = y;			result.y = -x;								var l : Number = length; 						if (l > 0) {								if (anticlockwise) { 	// anticlockwise with respect to Flash coordinate system									result.scaleBy( u / l );									} else {										result.scaleBy( -u / l );									}							} else {								result.x = result.y = 0;// = new Vector2D( 0 , 0 );							}						return result;			  		}		/**		 *  		 * 		 * @param		 * @return		 */		final public function angleWith( otherVector : Vector2D ) : Number {		    var dx:Number = otherVector.x - x;		    var dy:Number = otherVector.y - y;					    return Math.atan2(dy,dx);		}		/**		 *  		 * 		 * @param		 * @return		 */		final public function distance( vec2 : Vector2D , result : Vector2D ) : Number {						return ( subtract( vec2 , result )).length;				}				//------------------------------------------------------------------------------------------------------------------------------------------------------------		//-STATIC-----------------------------------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 *  		 * 		 * @param		 * @return		 */		static public function distance( vec1 : Vector2D , vec2 : Vector2D , result : Vector2D) : Number {							return ( vec1.subtract( vec2 , result )).length;				}		/**		 *  		 * 		 * @param		 * @return		 */		static public function angleBetween( vec1 : Vector2D , vec2 : Vector2D ) : Number {					return Math.acos( vec1.dotProduct( vec2 ) / ( vec1.length * vec2.length ) );				}		/**		 *  		 * 		 * @param		 * @return		 */		static public function scale( vec : Vector2D , sca : Number ) : void {						vec.x *= sca;			vec.y *= sca;					}		/**		 *  		 * 		 * @param		 * @return		 */		static public function vector2D( mag : Number , angle : Number  ,result : Vector2D , clockwise : Boolean = true) : Vector2D {			result.x 			= mag * Math.cos( angle );			result.y 			= mag * Math.sin( angle );							if (!clockwise) {								result.y *= -1;							}						return result;					}		}}